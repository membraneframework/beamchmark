<h2>Results</h2>
<h3>Basic metrics</h3>
<div id="basicMetrics"></div>
<h3>Utilization by scheduler type</h3>
<div id="schedulersByType"></div>
<h3>Total scheduler utilization</h3>
<div id="totalSchedulers"></div>
<h3>Utilization by scheduler type and ID</h3>
<div id="normalScheduler"></div>
<div id="cpuScheduler"></div>
<div id="ioScheduler"></div>
<h3>CPU utilization</h3>
<div id="average_cpu_usage"></div>
<div id="by_core_cpu_usage"></div>
<h3>Memory utilization</h3>
<div id="memory_usage"></div>
<script>
  <% has_base = not is_nil(base_measurements) %>

  <% base_color = "#451F55" %>
  <% new_color = "#DD7085" %>

  let indicatorConfig =  {
    type: "indicator",
    number: { font: { size: 70 } },
    <%= if has_base do %>
    mode: "number+delta"
    <% else %>
    mode: "number"
    <% end %>
  };
  let deltaConfig = {
    relative: true,
    valueformat: ".2%",
    increasing: { color: "#FF4136" },
    decreasing: { color: "#3D9970" }
  };
  let layoutConfig = {
    margin: {t: 0, b: 0, l: 0, r: 0}
  };
  let plotlyConfig = {
    displaylogo: false,
    responsive: true
  };

  let basicMetrics = [
    {
      title: { text: "Reductions" },
      value: <%= new_measurements.reductions %>,
      <%= if has_base do %>
      delta: { reference: <%= base_measurements.reductions %>, ...deltaConfig },
      <% end %>
      domain: { row: 0, column: 0 },
      ...indicatorConfig
    },
    {
      title: { text: "Context switches" },
      value: <%= new_measurements.context_switches %>,
      <%= if has_base do %>
      delta: { reference: <%= base_measurements.context_switches %>, ...deltaConfig },
      <% end %>
      domain: { row: 0, column: 1 },
      ...indicatorConfig
    },
    {
      title: { text: "Average CPU Usage [%]" },
      value: <%= new_measurements.cpu_info.average_all%>,
      <%= if has_base do %>
      delta: { reference: <%= base_measurements.cpu_info.average_all %>, ...deltaConfig },
      <% end %>
      domain: { row: 0, column: 2 },
      ...indicatorConfig
    }
  ];

  let basicMetricsLayout = {
    grid: { rows: 1, columns: 3, pattern: "independent" },
    height: 200,
    ...layoutConfig
  };

  Plotly.newPlot("basicMetrics", basicMetrics, basicMetricsLayout, plotlyConfig);

  let schedulersByType = [
    <%= for {title, column} <- Enum.with_index(["Normal", "CPU", "IO"]) do %>
      <%
     metric = as_downcase_atom("total_#{title}")
     {new_seconds, new_percent} = new_measurements.scheduler_info[metric]
     {base_seconds, base_percent} = if has_base, do: base_measurements.scheduler_info[metric], else: {0, 0}
     %>
      {
        title: { text: "<%= title %> Schedulers [s]" },
        value: <%= new_seconds %>,
        <%= if has_base do %>
        delta: { reference: <%= base_seconds %>, ...deltaConfig },
        <% end %>
        domain: { row: 0, column: <%= column %> },
        ...indicatorConfig
      },
      {
        title: { text: "<%= title %> Schedulers [%]" },
        value: <%= new_percent %>,
        <%= if has_base do %>
        delta: { reference: <%= base_percent %>, ...deltaConfig },
        <% end %>
        domain: { row: 1, column: <%= column %> },
        ...indicatorConfig
      },
    <% end %>
  ];

  let schedulersByTypeLayout = {
    grid: { rows: 2, columns: 3, pattern: "independent" },
    ...layoutConfig
  };

  Plotly.newPlot("schedulersByType", schedulersByType, schedulersByTypeLayout, plotlyConfig);

  let totalSchedulers = [
    <%= for {title, column} <- Enum.with_index(["Total", "Weighted"]) do %>
      <%
     metric = as_downcase_atom(title)
     {new_seconds, new_percent} = new_measurements.scheduler_info[metric]
     {base_seconds, base_percent} = if has_base, do: base_measurements.scheduler_info[metric], else: {0, 0}
     %>
      {
        title: { text: "<%= title %> utilization [s]" },
        value: <%= new_seconds %>,
        <%= if has_base do %>
        delta: { reference: <%= base_seconds %>, ...deltaConfig },
        <% end %>
        domain: { row: 0, column: <%= column %> },
        ...indicatorConfig
      },
      {
        title: { text: "<%= title %> utilization [%]" },
        value: <%= new_percent %>,
        <%= if has_base do %>
        delta: { reference: <%= base_percent %>, ...deltaConfig },
        <% end %>
        domain: { row: 1, column: <%= column %> },
        ...indicatorConfig
      },
    <% end %>
  ];

  let totalSchedulersLayout = {
    grid: { rows: 2, columns: 2, pattern: "independent" },
    ...layoutConfig
  };

  Plotly.newPlot("totalSchedulers", totalSchedulers, totalSchedulersLayout, plotlyConfig);

  let schedulerLayout = {
    barmode: "group",
    xaxis: {
      title: { text: "Scheduler ID" },
      type: "category"
    },
    yaxis: {
      title: { text: "Mean time spent busy [s]" }
    }
  };

  <%= for {title, scheduler_type} <- Enum.map(["Normal", "CPU", "IO"], &{&1, as_downcase_atom(&1)}),
     Enum.any?([new_measurements, base_measurements], &(not is_nil(&1) and was_busy?(&1.scheduler_info[scheduler_type])))
     do %>
    <%
     div_id = Atom.to_string(scheduler_type) <> "Scheduler"
     formatted_new = format_scheduler_info(new_measurements.scheduler_info[scheduler_type])
     %>
    let <%= div_id %> = [
      <%= if has_base do %>
      <% formatted_base = format_scheduler_info(base_measurements.scheduler_info[scheduler_type]) %>
      {
        name: "Base",
        type: "bar",
        marker: {
          color: "<%= base_color %>",
          opacity: 0.8,
          line: {
            color: "#22162B",
            width: 1.5
          }
        },
        x: [<%= formatted_base.scheduler_ids %>],
        y: [<%= formatted_base.usage %>],
        text: [<%= formatted_base.percent_usage %>]
      },
      <% end %>
      {
        name: "New",
        type: "bar",
        marker: {
          color: "<%= new_color %>",
          opacity: 0.8,
          line: {
            color: "<%= base_color %>",
            width: 1.5
          }
        },
        x: [<%= formatted_new.scheduler_ids %>],
        y: [<%= formatted_new.usage %>],
        text: [<%= formatted_new.percent_usage %>]
      }
    ];

    Plotly.newPlot(
      "<%= div_id %>",
      <%= div_id %>,
      { title: "<%= title %> Scheduler", ...schedulerLayout },
      plotlyConfig
    );
  <% end %>

    <%
     div_id = "average_cpu_usage"
     formatted_new = format_average_cpu_usage(new_measurements.cpu_info.cpu_snapshots)
     %>
    let <%= div_id %> = [
      <%= if has_base do %>
      <% formatted_base = format_average_cpu_usage(base_measurements.cpu_info.cpu_snapshots) %>
      {
        name: "base",
          mode: 'lines+markers',
          marker: {
            color: "<%= base_color %>",
            opacity: 0.8,
            line: {
              color: "#22162B",
              width: 1.5
            }
          },
        type: 'scatter',
        y: [<%= formatted_base.average_cpu_usage %>],
        x: [<%= formatted_base.time %>],
      },
      <% end %>
      {
        name: "new",
          mode: 'lines+markers',
          marker: {
            color: "<%= new_color %>",
            opacity: 0.8,
            line: {
              color: "#22162B",
              width: 1.5
            }
          },
        type: 'scatter',
        y: [<%= formatted_new.average_cpu_usage %>],
        x: [<%= formatted_new.time %>],
      }
    ];

    Plotly.newPlot(
      "<%= div_id %>",
      <%= div_id %>,
      {
        title: "Average CPU Usage",
        xaxis: {
          title: { text: "Time[s]" },
          },
        yaxis: {
          title: { text: "CPU Usage (all cores) [%]"}
          }
      },
      plotlyConfig
    );

    <%
     div_id = "by_core_cpu_usage"
     formatted_new = format_cpu_usage_by_core(new_measurements.cpu_info.cpu_snapshots)
     %>
    let <%= div_id %> = [
  <%= for core_id <- 0..formatted_new.cores_number-1
     do %>
      {
        name: "<%="core_" <> to_string(core_id) %>",
          mode: 'lines+markers',
          marker: {
            opacity: 0.8,
            line: {
              color: "#22162B",
              width: 1.5
            }
          },
        type: 'scatter',
        y: [<%= Enum.at(formatted_new.result,core_id)%>],
        x: [<%= formatted_new.time %>],
      },
    <% end %>
    ];

    Plotly.newPlot(
      "<%= div_id %>",
      <%= div_id %>,
      {
        title: "CPU Usage by core",
        xaxis: {
          title: { text: "Time[s]" },
          },
        yaxis: {
          title: { text: "CPU Usage by core [%]"}
          }
      },
      plotlyConfig
    );

    <%
     div_id = "memory_usage"
     formatted_new = format_memory_usage(new_measurements.memory_info.memory_snapshots)
     %>
    let <%= div_id %> = [
      <%= if has_base do %>
      <% formatted_base = format_memory_usage(base_measurements.memory_info.memory_snapshots) %>
      {
        name: "base",
          mode: 'lines+markers',
          marker: {
            color: "<%= base_color %>",
            opacity: 0.8,
            line: {
              color: "#22162B",
              width: 1.5
            }
          },
        type: 'scatter',
        y: [<%= formatted_base.memory_usage %>],
        x: [<%= formatted_base.time %>],
      },
      <% end %>
      {
        name: "new",
          mode: 'lines+markers',
          marker: {
            color: "<%= new_color %>",
            opacity: 0.8,
            line: {
              color: "#22162B",
              width: 1.5
            }
          },
        type: 'scatter',
        y: [<%= formatted_new.memory_usage %>],
        x: [<%= formatted_new.time %>],
      }
    ];

    Plotly.newPlot(
      "<%= div_id %>",
      <%= div_id %>,
      {
        title: "Memory usage",
        xaxis: {
          title: { text: "Time[s]" },
          },
        yaxis: {
          title: { text: "Memory Usage [B]"},
          tickformat: '.2e'
          }
      },
      plotlyConfig
    );
</script>
